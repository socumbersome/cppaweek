C++11 has introduced _inheriting constructors_ feature. It allows to literally inherit constructors from a base class thus saving us from boilerplate code and syntax is just `using Base::Base;`. Let's see an example:
```
#include <iostream>

class A {
public:
    A(int a = 2) : x_{a} {
        std::cout << "A's `int` ctor, a = " << a << std::endl;
    }
    A(double d) : x_{d} {
        std::cout << "A's `double` ctor, d = " << d << std::endl;
    }

    virtual void print() {
        std::cout << "A's print: " << x_ << std::endl;
    }
protected:
    int x_;
};

class B : A {
public:
    using A::A; // inheriting constructors from A
    
    B(double d) : A{d}, y_{d + 1} {
        std::cout << "B's `double` ctor, d = " << d << std::endl;
    }

    virtual void print() override {
        std::cout << "B's print: " << x_ << ", " << y_ << std::endl;
    }
protected:
    double y_;
};

class NoDefaultCtor {
public:
    NoDefaultCtor() = delete;
    NoDefaultCtor(int a) : a_{a} {}

    int a_;
};

class C : A {
public:
    using A::A; // inheriting constructors from A
    
    virtual void print() override {
        std::cout << "C's print: " << x_ << ", and some ndc..." << std::endl;
    }
protected:
    NoDefaultCtor ndc;
};

int main() {
    auto a1 = A();
    a1.print();
    auto a2 = A(3.14);
    a2.print();
    std::cout << "Now B's" << std::endl;
    auto b1 = B(3);
    b1.print();
    auto b2 = B(3.14);
    b2.print();
    
    // below gives a compile time error
    // auto c1 = C(2);
}
```
Output from that program
```
A's `int` ctor, a = 2
A's print: 2
A's `double` ctor, d = 3.14
A's print: 3
Now B's
A's `int` ctor, a = 3
B's print: 3, 0
A's `double` ctor, d = 3.14
B's `double` ctor, d = 3.14
B's print: 3, 4.14
```
And things to notice here:
* we can naturally hide any inherited constructor as `B(double d) : A{d}, y_{d + 1} {` shows
* when inherited constructor is used, default constructors for members in derived class will run as both `0` in `B's print: 3, 0` and `// auto c1 = C(2);` after uncommenting shows -- in the second case, one will get sth like
```
ex.cpp:65:19: error: use of deleted function ‘C::C(int) [inherited from A]’
   65 |      auto c1 = C(2);
      |                   ^
ex.cpp:44:14: note: ‘C::C(int) [inherited from A]’ is implicitly deleted because the default definition would be ill-formed:
   44 |     using A::A; // inheriting constructors from A
      |              ^
```

Also, maybe obvious, maybe not, there will be a cost of one call in `B` when using inherited constructor still. When run the example code under gdb, the line `auto b1 = B(3);`, when reaching `A::A` will have
```
Breakpoint 1, A::A (this=0x7fffffffdb30, a=3) at ex.cpp:6
6	        std::cout << "A's `int` ctor, a = " << a << std::endl;
(gdb) bt
#0  A::A (this=0x7fffffffdb30, a=3) at ex.cpp:6
#1  0x0000000000400cee in B::A (this=0x7fffffffdb30) at ex.cpp:21
#2  0x0000000000400a57 in main () at ex.cpp:59
```
So there is `B::A` at line 21 i.e. `using A::A;`. Hence, feature is for saving us from boilerplate but not for runtime optimizations.
